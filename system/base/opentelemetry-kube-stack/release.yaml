apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: opentelemetry-kube-stack
  namespace: opentelemetry
spec:
  releaseName: opentelemetry-kube-stack
  chart:
    spec:
      chart: opentelemetry-kube-stack
      # renovate: datasource=helm depName=opentelemetry-kube-stack registryUrl=https://open-telemetry.github.io/opentelemetry-helm-charts
      version: "0.6.2"
      sourceRef:
        kind: HelmRepository
        name: open-telemetry
        namespace: flux-system
  interval: 50m
  install:
    remediation:
      retries: 3
  values:
    # https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-kube-stack/values.yaml
    crds:
      installOtel: true
      installPrometheus: true

    opentelemetry-operator:
      # Subchart values https://github.com/open-telemetry/opentelemetry-helm-charts/blob/main/charts/opentelemetry-operator/values.yaml
      enabled: true
      manager:
        collectorImage:
          repository: otel/opentelemetry-collector-contrib
      crds:
        create: false # Disable as we install the CRDs globally
      
      replicaCount: 2 # Number of hypervisors

      pdb:
        create: true
        minAvailable: 1
      
      affinity:
        podAntiAffinity:
          # Refuse if possible to schedule two pods on the same hypervisor (e.g node)
          # If it does not, they also won't be scheduled on the same pod unless necessary
          preferredDuringSchedulingIgnoredDuringExecution:
            # Anti affinity on the same hypervisor
            - weight: 100
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - opentelemetry-operator
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                    - controller-manager
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - opentelemetry-kube-stack
            # Anti affinity on the same node
            - weight: 50
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - opentelemetry-operator
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                    - controller-manager
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                    - opentelemetry-kube-stack

    defaultCRConfig:

      observability:
        metrics:
          enableMetrics: true

      config:
        service:
          # Otel debug logs
          telemetry:
            logs:
              level: DEBUG

    collectors:
      daemon:
        enabled: true

        presets:
          logsCollection:
            enabled: true
            includeCollectorLogs: false
          kubeletMetrics:
            enabled: true
          hostMetrics:
            enabled: true
          kubernetesAttributes:
            enabled: true
        
        # Should run as root to collect hostMetrics
        securityContext:
          # readOnlyRootFilesystem:
          runAsNonRoot: false
          runAsUser: 0
          runAsGroup: 0

        # Tolerations to schedule daemon pods on control-plane nodes
        tolerations:
          - key: node-role.kubernetes.io/control-plane
            effect: NoSchedule

      cluster:
        enabled: true

        presets:
          kubernetesAttributes:
            enabled: true
          kubernetesEvents:
            enabled: true
          clusterMetrics:
            enabled: true
        

        # We wan't to keep a pod running
        podDisruptionBudget:
          minAvailable: 1
        
        config:
          receivers:
            # InfluxDB receiver for proxmox hypervisor metrics (tcp)
            influxdb:
              endpoint: 0.0.0.0:8086

          service:
            pipelines:
              logs:
                exporters:
                - debug
                processors:
                - k8sattributes
                - resourcedetection/env
                - batch
                receivers:
                - k8sobjects
              metrics:
                exporters:
                - debug
                processors:
                - k8sattributes
                - resourcedetection/env
                - batch
                receivers:
                - k8s_cluster
              metrics/proxmox:
                exporters:
                - debug
                processors:
                - batch
                receivers:
                - influxdb

    extraObjects:
      # Add service for external receivers
      - apiVersion: v1
        kind: Service
        metadata:
          name: otel-receivers
          namespace: opentelemetry
          annotations:
            io.cilium/lb-ipam-ips: ${otelcol_lb_ip}
          labels:
            homelab/public-service: "true"
        spec:
          selector:
            app.kubernetes.io/component: opentelemetry-collector
            app.kubernetes.io/instance: opentelemetry.opentelemetry-kube-stack-cluster-stats
          type: LoadBalancer
          sessionAffinity: None
          externalTrafficPolicy: Local
          internalTrafficPolicy: Cluster
          ports:
          - name: influxdb
            protocol: UDP
            port: 8086
            targetPort: 8086