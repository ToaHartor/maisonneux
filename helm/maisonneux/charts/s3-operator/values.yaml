crds:
  # -- Install and upgrade CRDs
  install: true
  # -- Keep CRDs on chart uninstall
  keep: true

controllerManager:
  manager:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
    image:
      repository: inseefrlab/s3-operator
      tag: latest
    imagePullPolicy: IfNotPresent
    imagePullSecrets: []
    resources:
      limits:
        cpu: 1000m
        memory: 512Mi
      requests:
        cpu: 50m
        memory: 64Mi
    extraArgs: []
    extraEnv: {}
  replicas: 1
kubernetesClusterDomain: cluster.local

s3:
  endpointUrl: "localhost:9000"

  # To manage access/secret keys, two options :
  #   - (Poor) Directly set them using the accessKey/secretKey parameters below.
  #   This makes them directly visible to anyone with enough rights on your k8s.
  #   - (Better) Use the existingSecret parameter to reference a k8s secret, which
  #   needs to contain at least two environment variables : S3_ACCESS_KEY and S3_SECRET_KEY.
  #   This in turn allows you to use another mechanism to further protect these,
  #   eg sealed secrets.
  existingSecret: "my-s3-operator-auth-secret"
  # accessKey: ""
  # secretKey: ""

  # If both "caCertificate" parameters are present, only
  # caCertificatesBase64 is used.

  # caCertificateBundlePath: /path/to/ca-bundle.crt
  # caCertificatesBase64:
  # - base64encodedPEMFormatCACertificate

  # Should the operator try to delete the resource from the S3 backend upon CR deletion ?
  deletion:
    bucket: false
    path: false
    policy: false
    s3user: false 

  s3user:
    overrideExistingSecret: false 