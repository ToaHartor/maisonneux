certmanager:
  domains: {{ .Values.domains }}
  cert_profile: {{ .Values.certmanager.ca }}

authentik:
  s3:
    secretName: &authentik-s3-secret authentik-s3user
    bucketName: &authentik-bucket authentik
    endpoint: &authentik-bucket-endpoint "http://{{ .Values.minio.accessUrl }}"
    customDomain: &authentik-custom-domain "{{ .Values.minio.accessUrl }}/authentik"
  global:
    env:
      - name: AUTHENTIK_BOOTSTRAP_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: authentik-akadmin-secret
      - name: AUTHENTIK_STORAGE__MEDIA__BACKEND
        value: s3
      - name: AUTHENTIK_STORAGE__MEDIA__S3__ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: accessKey
            name: *authentik-s3-secret
      - name: AUTHENTIK_STORAGE__MEDIA__S3__SECRET_KEY
        valueFrom:
          secretKeyRef:
            key: secretKey
            name: *authentik-s3-secret
      - name: AUTHENTIK_STORAGE__MEDIA__S3__BUCKET_NAME
        value: *authentik-bucket
      - name: AUTHENTIK_STORAGE__MEDIA__S3__ENDPOINT
        value: *authentik-bucket-endpoint
      - name: AUTHENTIK_STORAGE__MEDIA__S3__CUSTOM_DOMAIN
        value: *authentik-custom-domain
      - name: AUTHENTIK_STORAGE__MEDIA__S3__SECURE_URLS
        value: "false" # "true" if prod
  server:
    ingress:
      hosts:
        - "{{ .Values.authentik.domain }}"

s3-operator:
  s3:
    endpointUrl: {{ .Values.minio.accessUrl }}
  minio:
    accessKey: {{ .Values.minio.accessKey }}
    secretKey: {{ .Values.minio.secretKey }}

storage:
  persistentClassName: {{ .Values.storage.fastdata }}
