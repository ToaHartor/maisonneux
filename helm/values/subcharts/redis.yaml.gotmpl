# Reference in https://artifacthub.io/packages/helm/bitnami/redis
auth:
  enabled: false
architecture: replication
namespaceOverride: redis
# existingConfigmap:
# image:
#   registry:
#   pullPolicy:
# networkPolicy:
#   enabled: true
#   ingressNSMatchLabels:
#     redis: external
#   ingressNSPodMatchLabels:
#     redis-client: true
# Sentinel config
# sentinel:
#   enabled: false
#   redisShutdownWaitFailover: true
#   automateClusterRecovery: true
#   startupProbe:
#     enabled: true
#   livenessProbe:
#     enabled: true
#   readinessProbe:
#     enabled: true
#   quorum: 2

global:
  defaultStorageClass: {{ .Values.storage.fastdata }}

metrics:
  enabled: true

autoscaling:
  minReplicas: 1
  maxReplicas: 3

# Master pods config : access with read/write operations (redis-master.redis.svc.cluster.local)
master:
  kind: StatefulSet
  count: 1 # More than one is not supported
  # configuration:
  startupProbe:
    enabled: true
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

  persistence: &redis_persistence
    enabled: true
    # path: /data
    size: 1Gi
    # sizeLimit: 1Gi
    accessModes:
      - "ReadWriteOnce"
  persistentVolumeClaimRetentionPolicy: &redis_pvc_retention
    enabled: true
    whenDeleted: Delete
  # Node affinity to put master on a controlplane
  # nodeAffinityPreset:
  #   key: "node-role.kubernetes.io/control-plane"
  #   values: ""

  # TODO : fine tune after
  resources: {}

# Replica pods config : access with read-only operations (redis-replicas.redis.svc.cluster.local)
replica:
  kind: StatefulSet
  replicaCount: 2
  # configuration:
  startupProbe:
    enabled: true
  livenessProbe:
    enabled: true
  readinessProbe:
    enabled: true

  persistence: *redis_persistence
  persistentVolumeClaimRetentionPolicy: *redis_pvc_retention

  resources: {}
