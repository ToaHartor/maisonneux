apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
  namespace: immich
spec:
  releaseName: immich
  dependsOn:
    # Wait for DB resources to be deployed
    - name: immich-db
    - name: immich-oidc
  chart:
    spec:
      chart: immich
      # renovate: datasource=docker depName=immich registryUrl=oci://tccr.io/truecharts
      version: "18.3.3"
      sourceRef:
        kind: HelmRepository
        name: truecharts
        namespace: flux-system
  interval: 50m
  install:
    createNamespace: true
    remediation:
      retries: 3
  valuesFrom:
    - kind: Secret
      name: immich-db-creds
      valuesKey: password
      targetPath: cnpg.main.creds.password
    - kind: Secret
      name: immich-oidc-authentik-application
      valuesKey: clientID
      targetPath: authentikOidc.clientId
    - kind: Secret
      name: immich-oidc-authentik-application
      valuesKey: clientSecret
      targetPath: authentikOidc.clientSecret
    - kind: Secret
      name: immich-oidc-authentik-application
      valuesKey: issuerURL
      targetPath: authentikOidc.issuerUrl

  # see https://github.com/truecharts/public/blob/master/charts/stable/immich/values.yaml
  values:
    # storage:
    #   persistentClassName: ${fastdata_storage}
    authentikOidc:
      # clientId: # Filled by fluxcd
      # clientSecret: # Filled by fluxcd
      # issuerUrl:
      mobileRedirectUri:

    cnpg:
      main:
        enabled: false
        user: immich
        database: immich
        creds:
          # Hostname is basically "cluster-name"-rw
          host: immich-psql-cluster-rw
          # password: "" # Filled by secrets
    
    redis:
      enabled: false
      creds:
        plainhost: dragonfly-cluster.dragonfly.svc.cluster.local
        redisPassword: ""

    resources:
      limits:
        cpu: 500m
        memory: 600Mi
      requests:
        cpu: 100m
        memory: 300Mi
    service:
      apimetrics:
        enabled: true
        type: "ClusterIP"
        targetSelector: main
        ports:
          metrics:
            enabled: true
            port: 8081
            protocol: http
            targetPort: 8081
            targetSelector: main
      # microservicesmetrics:
      #   enabled: true
      #   type: "ClusterIP"
      #   targetSelector: microservices
      #   ports:
      #     metrics:
      #       enabled: true
      #       port: 8082
      #       protocol: http
      #       targetPort: 8082
      #       targetSelector: microservices

    workload:
      main:
        podSpec:
          annotations:
            prometheus.io/port: "8081"
            prometheus.io/scrape: "true"
            prometheus.io/path: "/metrics"
          containers:
            main:
              env:
                IMMICH_CONFIG_FILE: /config/immich-config.yaml
                # Metrics
                IMMICH_TELEMETRY_INCLUDE: api,io,repo,job
                # WARNING : ONLY FOR DEBUG
                NODE_TLS_REJECT_UNAUTHORIZED: "0"
                # REDIS_DBINDEX: ""
                # DB_PASSWORD:
                #   valueFrom:
                #     secretKeyRef:
                #       name: immich-db-creds
                #       key: password

      
      # microservices:
      #   podSpec:
      #     annotations:
      #       prometheus.io/port: "8082"
      #       prometheus.io/scrape: "true"
      #     containers:
      #       microservices:
      #         env:
    #             REDIS_DBINDEX: ""
    #             DB_PASSWORD:
    #               valueFrom:
    #                 secretKeyRef:
    #                   name: immich-db-creds
    #                   key: password
      
      # machinelearning:
      #   podSpec:
      #     containers:
      #       machinelearning:
      #         env:


    # https://immich.app/docs/install/config-file/
    configmap:
      immich-config:
        enabled: true
        data:
          immich-config.yaml: |
            oauth:
              enabled: true
              autoLaunch: false # true
              autoRegister: true
              buttonText: "Login with Authentik"
              clientId: {{ .Values.authentikOidc.clientId }}
              clientSecret: {{ .Values.authentikOidc.clientSecret }}
              issuerUrl: {{ .Values.authentikOidc.issuerUrl }}.well-known/openid-configuration
              mobileRedirectUri: "{{ .Values.authentikOidc.mobileRedirectUri }}"
              signingAlgorithm: RS256
              profileSigningAlgorithm: none
              storageLabelClaim: preferred_username
              # defaultStorageQuota:
            
            passwordLogin:
              enabled: true # false

            notifications:
              smtp:
                enabled: false


    persistence:
      # mlcache:
      
      # microcache:
          # enabled: true
          # size: 10Gi
          # type: emptyDir # or pvc
          # # accessMode: ReadWriteMany
          # # storageClass:
      config:
        enabled: true
        type: configmap
        objectName: immich-config
        expandObjectName: true
        optional: false
        defaultMode: "0777"
        mountPath: /config
        targetSelector:
          main:
            main: {}
    
      library:
        enabled: true
        mountPath: /usr/src/app/upload
        type: nfs
        server: ${nfs_server}
        path: ${nfs_path_immich}

      uploads:
        enabled: false
      
      backups:
        enabled: false
      
      thumbs:
        enabled: false

      profile:
        enabled: false
      
      video:
        enabled: false         
